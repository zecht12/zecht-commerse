generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  news                  News[]                 @relation("AuthorNews")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id     String   @id @default(cuid())
  email  String?
  token  String?  @unique
  expire DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
enum UserRole {
  ADMIN
  AUTHOR
  USER
}

model News {
  id          String     @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String
  author      User       @relation("AuthorNews", fields: [authorId], references: [id], onDelete: Cascade)
  isSensitive Boolean    @default(false)
  images      Image[]    @relation("NewsImages")
  category    String
}

model Image {
  id        String  @id @default(cuid())
  url       String
  headlight String?
  author    String
  newsId    String
  news      News    @relation("NewsImages", fields: [newsId], references: [id], onDelete: Cascade)
}